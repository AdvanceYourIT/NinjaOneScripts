# Version and platform check – required for WPF, Forms and DPAPI
if ($PSVersionTable.PSVersion -lt [version]"5.1") {
    Write-Host "❌ This script requires PowerShell version 5.1 or higher. Current version: $($PSVersionTable.PSVersion)"
    exit 1
}

<#
.SYNOPSIS
    NinjaOne Vulnerability Importer – A PowerShell GUI and CLI tool for importing, filtering, and uploading vulnerability scan data to NinjaOne.

.DESCRIPTION
    This PowerShell script provides a full-featured WPF GUI and an optional command-line interface (CLI) for managing and uploading vulnerability scan data to NinjaOne.

    GUI Mode:
    - Load a CSV file and filter it based on keywords, CVSS scores, and severity levels
    - Select visible columns and optionally strip domains from hostnames
    - Export filtered data to CSV
    - Connect to NinjaOne API, select scan group, and upload data securely
    - Save and load filter configurations, including secure credentials

    CLI Mode (headless):
    - Upload a CSV file directly to a specified scan group via command-line parameters
    - Useful for automation, scripting, or scheduled tasks

    Example CLI usage:
    .\NinjaOneVulnerabilityImporter.ps1 `
        -CSV "C:\Scans\latest-scan.csv" `
        -ClientID "abc123" `
        -ClientSecret "xyz456" `
        -BaseURL "eu.ninjarmm.com" `
        -ScanGroupID 1234 `
        -UploadOnly

.PARAMETER CSV
    Path to the CSV file to upload.

.PARAMETER ClientID
    The NinjaOne API Client ID.

.PARAMETER ClientSecret
    The NinjaOne API Client Secret.

.PARAMETER BaseURL
    The base NinjaOne API endpoint (e.g., eu.ninjarmm.com).

.PARAMETER ScanGroupID
    The ID of the scan group to which the CSV should be uploaded.

.PARAMETER UploadOnly
    Switch to enable headless upload mode (no GUI).

.PARAMETER FilterJson
    Optional path to a filter configuration JSON file.

.AUTHOR
    Robert van Oorschot – Advance Your IT – 2025

.LICENSE
    MIT License or internal use only (customizable)

.VERSION
    1.0.1
#>


param (
    [string]$CSV,
    [string]$ClientID,
    [string]$ClientSecret,
    [string]$BaseURL,
    [string]$ScanSource,
    [int]$ScanGroupID,
    [switch]$UploadOnly,
    [string]$FilterJson
)


# Global variables
$global:originalData = @()
$global:excludeFilter = ""
$global:cvssScoreFilter = "All"
$global:severityLevelFilter = "All"
$global:stripDomain = $false
$global:selectedColumns = @()
$global:cvssScoreColumn = "cvssScore"
$global:severityLevelColumn = "vulnerabilitySeverityLevel"
$global:TokenInfo = $null
$global:BaseURL = ""
$global:ClientID = ""
$global:ClientSecret = ""
$global:ScanGroups = $null
$global:IsConnected = $false
$global:ScanGroupID = 0
$global:PathtoCSV = ""
$global:exportPath = $null
$global:exportFileName = $null
$global:autoExportState = $false
$global:scanSource = $null
$global:filterFilePath = Join-Path -Path $env:APPDATA -ChildPath "NinjaOneVulnerabilityImporter\last_filters.json"
$global:stripDomainApplied = $false

# Ensure the filter file directory exists
$filterDir = Split-Path -Path $global:filterFilePath -Parent
if (-not (Test-Path -Path $filterDir)) {
    New-Item -ItemType Directory -Path $filterDir -Force | Out-Null
}

function Write-DebugLog {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Message
    )
    
    $logMessage = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $Message"
    Write-Debug $logMessage
}

function Write-LogEntry {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Message
    )

    $logMessage = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'): $Message"
    $logPath = Join-Path -Path $env:APPDATA -ChildPath "NinjaOneVulnerabilityImporter\log.txt"
    
    if (-not (Test-Path -Path (Split-Path -Path $logPath -Parent))) {
        New-Item -ItemType Directory -Path (Split-Path -Path $logPath -Parent) -Force | Out-Null
    }
    
    Add-Content -Path $logPath -Value $logMessage
    Write-Host $logMessage  # Add console-output
}

function Get-FilterTerms {
    if ([string]::IsNullOrWhiteSpace($global:excludeFilter)) {
        return @()
    }
    return ($global:excludeFilter -split ",").Trim()
}

function Update-DataGrid {
    try {
        if (-not $global:originalData -or $global:originalData.Count -eq 0) {
            $global:dataGridView.ItemsSource = $null
            $global:lblRowCount.Content = "Showing 0 of 0 rows"
            Write-LogEntry -Message "No data loaded in DataGrid."
            return
        }

        Write-LogEntry -Message "Updating DataGrid with stripDomain=$($global:stripDomain)"

        $filteredData = $global:originalData

        # Apply exclude filter
        $excludeTerms = Get-FilterTerms
        if ($excludeTerms.Count -gt 0) {
            $filteredData = $filteredData | Where-Object {
                $row = $_
                $exclude = $false
                foreach ($term in $excludeTerms) {
                    foreach ($prop in $row.PSObject.Properties) {
                        if ($prop.Value -and $prop.Value.ToString().ToLower() -like "*$($term.ToLower())*") {
                            $exclude = $true
                            break
                        }
                    }
                    if ($exclude) { break }
                }
                -not $exclude
            }
            Write-LogEntry -Message "Applied exclude filter: $($excludeTerms -join ', ')"
        }

        # Apply CVSS Score filter
        if ($global:cvssScoreFilter -ne "All") {
            $cvssThreshold = switch ($global:cvssScoreFilter) {
                ">= 9.0" { 9.0 }
                ">= 7.0" { 7.0 }
                ">= 4.0" { 4.0 }
                "<= 3.9" { 3.9 }
            }
            $filteredData = $filteredData | Where-Object {
                $cvssValue = $_.($global:cvssScoreColumn)
                if ($null -eq $cvssValue -or $cvssValue -eq "") { return $false }
                try {
                    $cvssNumeric = [double]($cvssValue -replace ',', '.')
                    if ($global:cvssScoreFilter -eq "<= 3.9") {
                        return $cvssNumeric -le $cvssThreshold
                    }
                    else {
                        return $cvssNumeric -ge $cvssThreshold
                    }
                }
                catch {
                    return $false
                }
            }
            Write-LogEntry -Message "Applied CVSS Score filter: $($global:cvssScoreFilter)"
        }

        # Apply Severity Level filter
        if ($global:severityLevelFilter -ne "All") {
            $filteredData = $filteredData | Where-Object {
                $severityValue = $_.($global:severityLevelColumn)
                if ($null -eq $severityValue -or $severityValue -eq "") { return $false }
                return $severityValue.ToLower() -eq $global:severityLevelFilter.ToLower()
            }
            Write-LogEntry -Message "Applied Severity Level filter: $($global:severityLevelFilter)"
        }

        # Apply strip domain only if it hasn't been applied yet
        if ($global:stripDomain -and -not $global:stripDomainApplied) {
            # Find deviceName column (case-insensitive, broader match)
            $deviceNameColumn = $global:originalData[0].PSObject.Properties.Name | Where-Object { $_ -eq "deviceName" -or $_ -eq "hostname" -or $_ -eq "computerName" } | Select-Object -First 1
            if ($deviceNameColumn) {
                Write-LogEntry -Message "Found deviceName column: $deviceNameColumn. Applying strip domain."
                $newOriginalData = @()
                foreach ($row in $global:originalData) {
                    $newRow = [PSCustomObject]@{}
                    foreach ($prop in $row.PSObject.Properties) {
                        $newRow | Add-Member -MemberType NoteProperty -Name $prop.Name -Value $prop.Value
                    }
                    if ($newRow.$deviceNameColumn -match '\.') {
                        $newRow.$deviceNameColumn = ($newRow.$deviceNameColumn -split '\.')[0]
                    }
                    $newOriginalData += $newRow
                }
                $global:originalData = $newOriginalData
                $global:stripDomainApplied = $true  # Mark as applied
                Write-LogEntry -Message "Strip domain applied to original data."

                # Reapply filters after modifying $global:originalData
                $filteredData = $global:originalData

                # Reapply exclude filter
                if ($excludeTerms.Count -gt 0) {
                    $filteredData = $filteredData | Where-Object {
                        $row = $_
                        $exclude = $false
                        foreach ($term in $excludeTerms) {
                            foreach ($prop in $row.PSObject.Properties) {
                                if ($prop.Value -and $prop.Value.ToString().ToLower() -like "*$($term.ToLower())*") {
                                    $exclude = $true
                                    break
                                }
                            }
                            if ($exclude) { break }
                        }
                        -not $exclude
                    }
                    Write-LogEntry -Message "Reapplied exclude filter after strip domain: $($excludeTerms -join ', ')"
                }

                # Reapply CVSS Score filter
                if ($global:cvssScoreFilter -ne "All") {
                    $cvssThreshold = switch ($global:cvssScoreFilter) {
                        ">= 9.0" { 9.0 }
                        ">= 7.0" { 7.0 }
                        ">= 4.0" { 4.0 }
                        "<= 3.9" { 3.9 }
                    }
                    $filteredData = $filteredData | Where-Object {
                        $cvssValue = $_.($global:cvssScoreColumn)
                        if ($null -eq $cvssValue -or $cvssValue -eq "") { return $false }
                        try {
                            $cvssNumeric = [double]($cvssValue -replace ',', '.')
                            if ($global:cvssScoreFilter -eq "<= 3.9") {
                                return $cvssNumeric -le $cvssThreshold
                            }
                            else {
                                return $cvssNumeric -ge $cvssThreshold
                            }
                        }
                        catch {
                            return $false
                        }
                    }
                    Write-LogEntry -Message "Reapplied CVSS Score filter after strip domain: $($global:cvssScoreFilter)"
                }

                # Reapply Severity Level filter
                if ($global:severityLevelFilter -ne "All") {
                    $filteredData = $filteredData | Where-Object {
                        $severityValue = $_.($global:severityLevelColumn)
                        if ($null -eq $severityValue -or $severityValue -eq "") { return $false }
                        return $severityValue.ToLower() -eq $global:severityLevelFilter.ToLower()
                    }
                    Write-LogEntry -Message "Reapplied Severity Level filter after strip domain: $($global:severityLevelFilter)"
                }
            }
            else {
                Write-LogEntry -Message "No deviceName-like column found for strip domain."
                [System.Windows.MessageBox]::Show("No column found matching 'deviceName', 'hostname', or 'computerName'. Strip domain skipped.", "Warning", "OK", "Warning")
            }
        }
        elseif ($global:stripDomain -and $global:stripDomainApplied) {
            Write-LogEntry -Message "Strip domain already applied, skipping."
        }
        else {
            Write-LogEntry -Message "Strip domain is disabled."
        }

        # Apply selected columns
        $displayData = $filteredData
        if ($global:selectedColumns.Count -gt 0) {
            $displayData = $filteredData | Select-Object -Property $global:selectedColumns
            Write-LogEntry -Message "Applied selected columns: $($global:selectedColumns -join ', ')"
        }

        # Update DataGrid
        $global:dataGridView.ItemsSource = $displayData
        $global:dataGridView.Items.Refresh()  # Force refresh
        $global:lblRowCount.Content = "Showing $($displayData.Count) of $($global:originalData.Count) rows"
        Write-LogEntry -Message "DataGrid updated. Showing $($displayData.Count) rows."

        # Auto-export if enabled
        if ($global:autoExportState) {
            Export-FilteredCSV
            Write-LogEntry -Message "Auto-export triggered."
        }

        # Save filter settings
        $filters = Get-FilterTerms
        $json = @{
            exportFileName = $global:exportFileName
            exportPath = $global:exportPath
            filters = $filters
            autoExport = $global:autoExportState
            ScanSource = $global:scanSource
            SelectedColumns = $global:selectedColumns
            CvssScoreColumn = $global:cvssScoreColumn
            SeverityLevelColumn = $global:severityLevelColumn
            BaseURL = $global:BaseURL
        } | ConvertTo-Json -Depth 3
        $json | Out-File -Encoding UTF8 -FilePath $global:filterFilePath
        Write-LogEntry -Message "Filters saved to: $global:filterFilePath"
    }
    catch {
        Write-LogEntry -Message "Error updating DataGrid: $_"
        [System.Windows.MessageBox]::Show("Error updating DataGrid: $_", "Error", "OK", "Error")
    }
}

function Export-FilteredCSV {
    try {
        if (-not $global:exportPath -or -not $global:exportFileName) {
            $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
            $saveFileDialog.Filter = "CSV files (*.csv)|*.csv"
            $saveFileDialog.FileName = "filtered_output.csv"
            if ($saveFileDialog.ShowDialog() -ne "OK") {
                Write-LogEntry -Message "Export cancelled by user."
                return
            }
            $global:exportPath = Split-Path -Path $saveFileDialog.FileName -Parent
            $global:exportFileName = Split-Path -Path $saveFileDialog.FileName -Leaf
        }

        $filteredData = $global:dataGridView.ItemsSource
        if (-not $filteredData) {
            throw "No data to export. Please load and filter a CSV first."
        }

        Write-LogEntry -Message "Exporting filtered CSV with stripDomain=$($global:stripDomain)"
        $csvPath = Join-Path -Path $global:exportPath -ChildPath $global:exportFileName
        $filteredData | Export-Csv -Path $csvPath -Delimiter "," -NoTypeInformation -Encoding UTF8
        Write-LogEntry -Message "Exported filtered CSV to: $csvPath"
        # Log a sample of exported data
        $sampleRow = $filteredData | Select-Object -First 1
        if ($sampleRow) {
            $deviceNameColumn = $sampleRow.PSObject.Properties.Name | Where-Object { $_ -imatch "deviceName|hostname|computerName|name" } | Select-Object -First 1
            if ($deviceNameColumn) {
                Write-LogEntry -Message "Sample exported deviceName: $($sampleRow.$deviceNameColumn)"
            }
        }
    }
    catch {
        Write-LogEntry -Message "Error exporting CSV: $_"
        [System.Windows.MessageBox]::Show("Error exporting CSV: $_", "Error", "OK", "Error")
    }
}

function Get-BaseSettings {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Method
    )

    return @{
        Uri = "https://$global:BaseURL/api/v2/$global:Request"
        Method = $Method
        Headers = @{
            Authorization = "Bearer $($global:TokenInfo.access_token)"
            Accept = "application/json"
        }
        ErrorAction = "Stop"
    }
}

function Get-NinjaToken {
    try {
        $Body = @{
            grant_type = "client_credentials"
            client_id = $global:ClientID
            client_secret = $global:ClientSecret
            scope = "monitoring management offline_access"
        }

        if ($($PSVersionTable.PSVersion -ge [version]'7.0')) {
            $Params = @{
                Uri = "https://$global:BaseURL/ws/oauth/token"
                Method = 'Post'
                Body = $Body
                ContentType = 'application/x-www-form-urlencoded'
                ErrorAction = 'Stop'
            }
            $Response = Invoke-WebRequest @Params
        }
        else {
            $BodyString = ($Body.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join '&'
            $Params = @{
                Uri = "https://$global:BaseURL/ws/oauth/token"
                Method = 'Post'
                Body = $BodyString
                ContentType = 'application/x-www-form-urlencoded'
                ErrorAction = 'Stop'
            }
            $Response = Invoke-WebRequest @Params
        }

        $Token = ($Response.Content | ConvertFrom-Json)
        Write-LogEntry -Message "Successfully retrieved NinjaOne token."
        return $Token
    }
    catch {
        Write-LogEntry -Message "Failed to retrieve NinjaOne token: $_"
        throw "Failed to retrieve NinjaOne token: $_"
    }
}

function Refresh-NinjaToken {
    try {
        $Body = @{
            grant_type = "refresh_token"
            client_id = $global:ClientID
            client_secret = $global:ClientSecret
            refresh_token = $global:TokenInfo.refresh_token
        }

        if ($($PSVersionTable.PSVersion -ge [version]'7.0')) {
            $Params = @{
                Uri = "https://$global:BaseURL/ws/oauth/token"
                Method = 'Post'
                Body = $Body
                ContentType = 'application/x-www-form-urlencoded'
                ErrorAction = 'Stop'
            }
            $Response = Invoke-WebRequest @Params
        }
        else {
            $BodyString = ($Body.GetEnumerator() | ForEach-Object { "$($_.Key)=$($_.Value)" }) -join '&'
            $Params = @{
                Uri = "https://$global:BaseURL/ws/oauth/token"
                Method = 'Post'
                Body = $BodyString
                ContentType = 'application/x-www-form-urlencoded'
                ErrorAction = 'Stop'
            }
            $Response = Invoke-WebRequest @Params
        }

        $global:TokenInfo = ($Response.Content | ConvertFrom-Json)
        Write-LogEntry -Message "Successfully refreshed NinjaOne token."
    }
    catch {
        Write-LogEntry -Message "Failed to refresh NinjaOne token: $_"
        throw "Failed to refresh NinjaOne token: $_"
    }
}

function Get-VulScanGroups {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)]
        [string]$SGID
    )

    $maxRetries = 3
    $retryCount = 0
    $delaySeconds = 5

    while ($retryCount -lt $maxRetries) {
        try {
            if ($($PSVersionTable.PSVersion -ge [version]'7.0')) {
                $global:Request = if ($SGID) { "vulnerability/scan-groups/$SGID" } else { "vulnerability/scan-groups" }
                $Params = Get-BaseSettings -Method 'Get'
                $Response = Invoke-WebRequest @Params
                $ScanGroups = ($Response.Content | ConvertFrom-Json)
                Write-LogEntry -Message "Successfully retrieved scan groups: $($ScanGroups | ConvertTo-Json -Depth 3)"
                return $ScanGroups
            }
            else {
                $APIURL = if ($SGID) { "https://$global:BaseURL/api/v2/vulnerability/scan-groups/$SGID" } else { "https://$global:BaseURL/api/v2/vulnerability/scan-groups" }
                
                Add-Type -AssemblyName System.Net.Http
                $HTTPClient = New-Object System.Net.Http.HttpClient
                $HTTPClient.DefaultRequestHeaders.Authorization = New-Object System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", $global:TokenInfo.access_token)
                
                $APICall = $HTTPClient.GetAsync($APIURL)
                $APICall.Wait()
                $Response = $APICall.Result
                
                $APIResponse = $Response.Content.ReadAsStringAsync()
                $APIResponse.Wait()
                
                if (!($Response.IsSuccessStatusCode)) {
                    $HTTPClient.Dispose()
                    throw "API call failed with status code: $($Response.StatusCode). Response: $($APIResponse.Result)"
                }
                
                $ScanGroups = ($APIResponse.Result | ConvertFrom-Json)
                Write-LogEntry -Message "Successfully retrieved scan groups via HTTPClient: $($ScanGroups | ConvertTo-Json -Depth 3)"
                $HTTPClient.Dispose()
                return $ScanGroups
            }
        }
        catch {
            $retryCount++
            $statusCode = if ($_.Exception.Response) { $_.Exception.Response.StatusCode.Value__ } else { "N/A" }
            $errorMessage = $_.Exception.Message
            if ($_.Exception.Response -and $_.Exception.Response.Content) {
                try {
                    $errorContent = $_.Exception.Response.Content.ReadAsStringAsync().Result
                    Write-LogEntry -Message "Raw API response content: $errorContent"
                    $parsedError = $errorContent | ConvertFrom-Json
                    $errorMessage = "$($parsedError.error): $($parsedError.message)"
                }
                catch {
                    $errorMessage = "Failed to parse error response: $errorContent"
                }
            }
            Write-LogEntry -Message "Attempt $retryCount/$maxRetries failed to retrieve scan groups. Status: $statusCode, Error: $errorMessage"
            
            if ($statusCode -eq 401) {
                Write-LogEntry -Message "Received 401 Unauthorized. Attempting to refresh token..."
                try {
                    Refresh-NinjaToken
                    $Params = Get-BaseSettings -Method 'Get'
                    $retryCount--
                    continue
                }
                catch {
                    Write-LogEntry -Message "Failed to refresh token: $_"
                    throw "Failed to refresh token after 401 Unauthorized: $_"
                }
            }

            if ($retryCount -eq $maxRetries) {
                Write-LogEntry -Message "Failed to retrieve scan groups after $maxRetries attempts."
                throw "Failed to retrieve scan groups after $maxRetries attempts: $errorMessage"
            }
            if ($statusCode -eq 429) {
                Write-LogEntry -Message "Rate limit exceeded. Retrying in $delaySeconds seconds..."
            }
            Start-Sleep -Seconds $delaySeconds
        }
        finally {
            if ($HTTPClient) {
                $HTTPClient.Dispose()
            }
        }
    }
}

function New-VulScanImport {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [int]$SGID,
        [Parameter(Mandatory = $true)]
        [string]$CSV
    )

    $maxRetries = 3
    $retryCount = 0
    $delaySeconds = 5

    while ($retryCount -lt $maxRetries) {
        try {
            if ($($PSVersionTable.PSVersion -ge [version]'7.0')) {
                $global:Request = "vulnerability/scan-groups/$SGID/upload"
                $Params = Get-BaseSettings -Method 'Post'
                $Form = @{
                    "csv" = Get-Item $CSV
                }
            
                $Response = Invoke-WebRequest @Params -Form $Form
                Write-LogEntry -Message ($Response.Content | Out-String)
                return
            }
            else {
                $APIURL = "https://$global:BaseURL/api/v2/vulnerability/scan-groups/$SGID/upload"

                Add-Type -AssemblyName System.Net.Http
                
                $HTTPClient = New-Object System.Net.Http.HttpClient
                $HTTPClient.DefaultRequestHeaders.Authorization = New-Object System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", $global:TokenInfo.access_token)
                
                $MPFormData = New-Object System.Net.Http.MultipartFormDataContent
                
                $FileStream = [System.IO.File]::OpenRead($CSV)
                $FileName = [System.IO.Path]::GetFileName($CSV)
                $StreamContent = New-Object System.Net.Http.StreamContent($FileStream)
                $StreamContent.Headers.ContentType = [System.Net.Http.Headers.MediaTypeHeaderValue]::Parse("text/csv")
                
                $MPFormData.Add($StreamContent, "csv", $FileName)
                
                $APICall = $HTTPClient.PostAsync($APIURL, $MPFormData)
                $APICall.Wait()
                $Response = $APICall.Result
            
                $APIResponse = $Response.Content.ReadAsStringAsync()
                $APIResponse.Wait()
            
                if (!($Response.IsSuccessStatusCode)) {
                    $FileStream.Close()
                    $HTTPClient.Dispose()
                    throw "API call failed with status code: $($Response.StatusCode). Response: $($APIResponse.Result)"
                }
            
                Write-LogEntry -Message "Successfully uploaded CSV to NinjaOne via HTTPClient: $($APIResponse.Result)"
                $FileStream.Close()
                $HTTPClient.Dispose()
                return
            }
        }
        catch {
            $retryCount++
            $statusCode = if ($_.Exception.Response) { $_.Exception.Response.StatusCode.Value__ } else { "N/A" }
            $errorMessage = $_.Exception.Message
            if ($_.Exception.Response -and $_.Exception.Response.Content) {
                try {
                    $errorContent = $_.Exception.Response.Content.ReadAsStringAsync().Result
                    Write-LogEntry -Message "Raw API response content: $errorContent"
                    $parsedError = $errorContent | ConvertFrom-Json
                    $errorMessage = "$($parsedError.error): $($parsedError.message)"
                }
                catch {
                    $errorMessage = "Failed to parse error response: $errorContent"
                }
            }
            Write-LogEntry -Message "Attempt $retryCount/$maxRetries failed to upload CSV. Status: $statusCode, Error: $errorMessage"
            
            if ($statusCode -eq 401) {
                Write-LogEntry -Message "Received 401 Unauthorized. Attempting to refresh token..."
                try {
                    Refresh-NinjaToken
                    $Params = Get-BaseSettings -Method 'Post'
                    $retryCount--
                    continue
                }
                catch {
                    Write-LogEntry -Message "Failed to refresh token: $_"
                    throw "Failed to refresh token after 401 Unauthorized: $_"
                }
            }

            if ($retryCount -eq $maxRetries) {
                Write-LogEntry -Message "Failed to upload CSV after $maxRetries attempts."
                throw "Failed to upload CSV after $maxRetries attempts: $errorMessage"
            }
            if ($statusCode -eq 429) {
                Write-LogEntry -Message "Rate limit exceeded. Retrying in $delaySeconds seconds..."
            }
            Start-Sleep -Seconds $delaySeconds
        }
        finally {
            if ($FileStream) {
                $FileStream.Close()
            }
            if ($HTTPClient) {
                $HTTPClient.Dispose()
            }
        }
    }
}

function Test-Connection {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [string]$Server,
        [Parameter(Mandatory = $true)]
        [string]$Port
    )

    $Connection = $null
    try {
        $Connection = New-Object System.Net.Sockets.TcpClient
        $Connection.Connect($Server, $Port)
        Write-LogEntry -Message "Successfully connected to $Server on port $Port"
        return $true
    }
    catch {
        Write-LogEntry -Message "Failed to connect to $Server on port $Port : $_"
        return $false
    }
    finally {
        if ($Connection) {
            $Connection.Close()
            $Connection.Dispose()
        }
    }
}

function Show-GUI {
    Write-DebugLog -Message "Creating the WPF main window..."
    try {
        $xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="NinjaOne Vulnerability Importer - CSV Viewer" 
        Width="1200" 
        Height="720" 
        MinWidth="800" 
        MinHeight="600" 
        WindowStartupLocation="CenterScreen"
        Background="#252526">
    <Window.Resources>
        <!-- Style for Buttons -->
        <Style TargetType="Button">
            <Setter Property="Background" Value="#007ACC"/>
            <Setter Property="Foreground" Value="#FFFFFF"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="Width" Value="120"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1" 
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#0066B3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#005B9C"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Style for Labels -->
        <Style TargetType="Label">
            <Setter Property="Foreground" Value="#D4D4D4"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <!-- Style for TextBox -->
        <Style TargetType="TextBox">
            <Setter Property="Background" Value="#1E1E1E"/>
            <Setter Property="Foreground" Value="#FFFFFF"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Height" Value="28"/>
        </Style>
        <!-- Style for ComboBox -->
        <Style TargetType="ComboBox">
            <Setter Property="Background" Value="#1E1E1E"/>
            <Setter Property="Foreground" Value="#FFFFFF"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Width" Value="200"/>
            <Setter Property="Height" Value="28"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton x:Name="ToggleButton" 
                                          BorderBrush="{TemplateBinding BorderBrush}" 
                                          Background="{TemplateBinding Background}" 
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          ClickMode="Press">
                                <ToggleButton.Template>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="18"/>
                                            </Grid.ColumnDefinitions>
                                            <Border x:Name="Border" 
                                                    Grid.ColumnSpan="2" 
                                                    Background="{TemplateBinding Background}" 
                                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                                    BorderThickness="1"/>
                                            <Border Grid.Column="0" Margin="1" Background="{TemplateBinding Background}"/>
                                            <Path x:Name="Arrow" 
                                                  Grid.Column="1" 
                                                  Fill="#FFFFFF" 
                                                  HorizontalAlignment="Center" 
                                                  VerticalAlignment="Center" 
                                                  Data="M 0 0 L 4 4 L 8 0 Z"/>
                                        </Grid>
                                    </ControlTemplate>
                                </ToggleButton.Template>
                            </ToggleButton>
                            <ContentPresenter x:Name="ContentSite" 
                                              IsHitTestVisible="False" 
                                              Content="{TemplateBinding SelectionBoxItem}" 
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                              Margin="{TemplateBinding Padding}" 
                                              VerticalAlignment="Center" 
                                              HorizontalAlignment="Left"/>
                            <Popup x:Name="Popup" 
                                   Placement="Bottom" 
                                   IsOpen="{TemplateBinding IsDropDownOpen}" 
                                   AllowsTransparency="True" 
                                   Focusable="False" 
                                   PopupAnimation="Slide">
                                <Grid x:Name="DropDown" 
                                      SnapsToDevicePixels="True" 
                                      MinWidth="{TemplateBinding ActualWidth}" 
                                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border x:Name="DropDownBorder" 
                                            Background="#1E1E1E" 
                                            BorderThickness="1" 
                                            BorderBrush="#555555"/>
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="ComboBoxItem">
                        <Setter Property="Background" Value="#1E1E1E"/>
                        <Setter Property="Foreground" Value="#FFFFFF"/>
                        <Setter Property="Padding" Value="5"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ComboBoxItem">
                                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                        <ContentPresenter/>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsHighlighted" Value="True">
                                            <Setter Property="Background" Value="#333333"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="#333333"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Setter.Value>
            </Setter>
        </Style>
        <!-- Style for CheckBox -->
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="#D4D4D4"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <!-- Style for DataGrid -->
        <Style TargetType="DataGrid">
            <Setter Property="Background" Value="#1E1E1E"/>
            <Setter Property="Foreground" Value="#D4D4D4"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="RowBackground" Value="#2D2D2D"/>
            <Setter Property="AlternatingRowBackground" Value="#252526"/>
            <Setter Property="GridLinesVisibility" Value="None"/>
            <Setter Property="HeadersVisibility" Value="Column"/>
            <Setter Property="Margin" Value="5"/>
        </Style>
        <!-- Style for DataGrid Column Header -->
        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="#333333"/>
            <Setter Property="Foreground" Value="#D4D4D4"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="BorderThickness" Value="0,0,1,1"/>
            <Setter Property="Padding" Value="5"/>
        </Style>
        <!-- Style for ScrollBar -->
        <Style TargetType="ScrollBar">
            <Setter Property="Background" Value="#333333"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="Width" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollBar">
                        <Grid Background="{TemplateBinding Background}">
                            <Track x:Name="PART_Track" IsDirectionReversed="True">
                                <Track.Thumb>
                                    <Thumb Background="#555555" BorderBrush="#777777" BorderThickness="1"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Margin="10" Background="#252526">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <!-- File Operations -->
            <RowDefinition Height="Auto"/> <!-- Filter Settings -->
            <RowDefinition Height="*"/>    <!-- DataGrid and Row Count -->
        </Grid.RowDefinitions>

        <!-- Row 0: File Operations -->
        <Border Grid.Row="0" BorderBrush="#555555" BorderThickness="1" CornerRadius="3" Margin="0,0,0,10" Padding="5">
            <StackPanel Orientation="Horizontal">
                <Label Content="File:" Foreground="#D4D4D4" VerticalAlignment="Center"/>
                <Button x:Name="btnLoadCSV" Content="Load CSV"/>
                <Label x:Name="lblFilePath" Content="No CSV loaded" Margin="10,5,5,5" VerticalAlignment="Center"/>
            </StackPanel>
        </Border>

        <!-- Row 1: Filter Settings -->
        <Border Grid.Row="1" BorderBrush="#555555" BorderThickness="1" CornerRadius="3" Margin="0,0,0,10" Padding="5">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <!-- Exclude Filter -->
                <Label x:Name="lblFilter" Content="Exclude rows containing:" Grid.Column="0" VerticalAlignment="Center"/>
                <TextBox x:Name="txtFilter" Width="200" Grid.Column="1" VerticalAlignment="Center"/>
                <!-- Select Columns -->
                <Button x:Name="btnSelectColumns" Content="Select Columns" Grid.Column="2" Margin="10,5,5,5"/>
                <!-- Strip Domain -->
                <CheckBox x:Name="chkStripDomain" Content="Strip domain from deviceName" Grid.Column="3" Margin="10,5,5,5" VerticalAlignment="Center"/>
                <!-- Filter Options -->
                <Button x:Name="btnFilterOptions" Content="Filter Options" Grid.Column="4" HorizontalAlignment="Right"/>
            </Grid>
        </Border>

        <!-- Row 2: DataGrid and Row Count -->
        <Grid Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Label x:Name="lblRowCount" Content="Showing 0 of 0 rows" Grid.Row="0" Margin="0,0,0,5"/>
            <DataGrid x:Name="dataGridView" Grid.Row="1" AutoGenerateColumns="True" IsReadOnly="True"/>
        </Grid>
    </Grid>
</Window>
"@

        $reader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($xaml))
        $window = [Windows.Markup.XamlReader]::Load($reader)
        $reader.Dispose()

        # Retrieve the controls
        $global:btnLoadCSV = $window.FindName("btnLoadCSV")
        $global:lblFilter = $window.FindName("lblFilter")
        $global:txtFilter = $window.FindName("txtFilter")
        $global:btnSelectColumns = $window.FindName("btnSelectColumns")
        $global:chkStripDomain = $window.FindName("chkStripDomain")
        $global:btnFilterOptions = $window.FindName("btnFilterOptions")
        $global:lblRowCount = $window.FindName("lblRowCount")
        $global:dataGridView = $window.FindName("dataGridView")
        $global:lblFilePath = $window.FindName("lblFilePath")
        $global:btnSelectColumns.IsEnabled = $false
        $global:btnFilterOptions.IsEnabled = $false

        # Attach event handlers
        $global:btnLoadCSV.Add_Click({
            $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
            $openFileDialog.Filter = "CSV files (*.csv)|*.csv"
            if ($openFileDialog.ShowDialog() -eq "OK" -and $openFileDialog.FileName) {
                try {
                    $delimiter = ','  # Hard-coded delimiter
                    $global:originalData = Get-Content -Path $openFileDialog.FileName | ConvertFrom-Csv -Delimiter $delimiter
        
                    # Normalize cvssScore column (replace comma with dot)
                    foreach ($row in $global:originalData) {
                        if ($null -ne $row.($global:cvssScoreColumn) -and $row.($global:cvssScoreColumn) -ne "") {
                            $row.($global:cvssScoreColumn) = $row.($global:cvssScoreColumn) -replace ',', '.'
                        }
                    }
        
                    $global:lblFilePath.Content = "Loaded: $($openFileDialog.FileName)"
                    $global:selectedColumns = @()
                    $global:txtFilter.Text = ""
                    $global:excludeFilter = ""
                    $global:cvssScoreFilter = "All"
                    $global:severityLevelFilter = "All"
                    $global:cvssScoreColumn = "cvssScore"
                    $global:severityLevelColumn = "vulnerabilitySeverityLevel"
                    $global:autoExportState = $false
                    $global:scanSource = $null
                    $global:stripDomainApplied = $false  # Reset the flag when new data is loaded
                    $global:btnSelectColumns.IsEnabled = $true
                    $global:btnFilterOptions.IsEnabled = $true

                    Update-DataGrid
                    Write-LogEntry -Message "Successfully loaded CSV: $($openFileDialog.FileName)"
                }
                catch {
                    [System.Windows.MessageBox]::Show("Failed to load CSV: $_", "Error", "OK", "Error")
                    Write-LogEntry -Message "Failed to load CSV: $_"
                }
            }
        })

        $global:txtFilter.Add_TextChanged({
            $global:excludeFilter = $global:txtFilter.Text
            Update-DataGrid
            Write-LogEntry -Message "Updated exclude filter to: $($global:excludeFilter)"
        })

        $global:btnSelectColumns.Add_Click({
            if (-not $global:originalData -or $global:originalData.Count -eq 0) {
                [System.Windows.MessageBox]::Show("Please load a CSV file first.", "Warning", "OK", "Warning")
                Write-LogEntry -Message "Select Columns clicked but no CSV loaded."
                return
            }

            $columnWindowXaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Select Columns" 
        Width="300" 
        Height="400" 
        WindowStartupLocation="CenterOwner"
        Background="#252526">
    <Window.Resources>
        <Style TargetType="Button">
            <Setter Property="Background" Value="#007ACC"/>
            <Setter Property="Foreground" Value="#FFFFFF"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="1" 
                                CornerRadius="3">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#0066B3"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#005B9C"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ListBox">
            <Setter Property="Background" Value="#1E1E1E"/>
            <Setter Property="Foreground" Value="#D4D4D4"/>
            <Setter Property="BorderBrush" Value="#555555"/>
        </Style>
        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="#D4D4D4"/>
            <Setter Property="Margin" Value="5"/>
        </Style>
        <Style TargetType="ScrollBar">
            <Setter Property="Background" Value="#333333"/>
            <Setter Property="BorderBrush" Value="#555555"/>
            <Setter Property="Width" Value="12"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollBar">
                        <Grid Background="{TemplateBinding Background}">
                            <Track x:Name="PART_Track" IsDirectionReversed="True">
                                <Track.Thumb>
                                    <Thumb Background="#555555" BorderBrush="#777777" BorderThickness="1"/>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Margin="10" Background="#252526">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <ListBox x:Name="checkedListBox" Grid.Row="0" SelectionMode="Multiple"/>
        <Button x:Name="btnOK" Content="OK" Grid.Row="1" Width="75" HorizontalAlignment="Center" Margin="0,10,0,0"/>
    </Grid>
</Window>
"@

            $reader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($columnWindowXaml))
            $columnWindow = [Windows.Markup.XamlReader]::Load($reader)
            $reader.Dispose()

            $checkedListBox = $columnWindow.FindName("checkedListBox")
            $btnOK = $columnWindow.FindName("btnOK")

            $allColumns = $global:originalData[0].PSObject.Properties.Name
            foreach ($col in $allColumns) {
                $checkBox = New-Object System.Windows.Controls.CheckBox
                $checkBox.Content = $col
                $checkBox.IsChecked = ($global:selectedColumns.Count -eq 0 -or $global:selectedColumns -contains $col)
                $checkedListBox.Items.Add($checkBox) | Out-Null
            }

            $btnOK.Add_Click({
                $global:selectedColumns = @()
                foreach ($item in $checkedListBox.Items) {
                    if ($item.IsChecked) {
                        $global:selectedColumns += $item.Content
                    }
                }
                $columnWindow.Close()
                Update-DataGrid
                Write-LogEntry -Message "Selected columns updated: $($global:selectedColumns -join ', ')"
            })

            $columnWindow.ShowDialog()
        })

        $global:chkStripDomain.IsChecked = $global:stripDomain
$global:chkStripDomain.Add_Checked({
    Write-LogEntry -Message "Strip domain checkbox checked."
    $global:stripDomain = $true
    $global:stripDomainApplied = $false  # Reset the flag to allow reapplication
    Update-DataGrid
})
$global:chkStripDomain.Add_Unchecked({
    Write-LogEntry -Message "Strip domain checkbox unchecked."
    $global:stripDomain = $false
    # Reload the original CSV to undo strip domain
    if ($global:lblFilePath.Content -and $global:lblFilePath.Content -ne "No CSV loaded") {
        $filePath = $global:lblFilePath.Content -replace "^Loaded: ", ""
        if (Test-Path $filePath) {
            $delimiter = ','  # Hard-coded delimiter
            $global:originalData = Get-Content -Path $filePath | ConvertFrom-Csv -Delimiter $delimiter
            # Normalize cvssScore column (replace comma with dot)
            foreach ($row in $global:originalData) {
                if ($null -ne $row.($global:cvssScoreColumn) -and $row.($global:cvssScoreColumn) -ne "") {
                    $row.($global:cvssScoreColumn) = $row.($global:cvssScoreColumn) -replace ',', '.'
                }
            }
            $global:stripDomainApplied = $false  # Reset the flag
            Update-DataGrid
            Write-LogEntry -Message "Reloaded original CSV to undo strip domain: $filePath"
        }
        else {
            Write-LogEntry -Message "Original CSV file not found: $filePath"
        }
    }
})

        $global:btnFilterOptions.Add_Click({
            if (-not $global:originalData -or $global:originalData.Count -eq 0) {
                [System.Windows.MessageBox]::Show("Please load a CSV file first.", "Warning", "OK", "Warning")
                Write-LogEntry -Message "Filter Options clicked but no CSV loaded."
                return
            }
        
            $filterWindowXaml = @"
        <Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                Title="Filter Options" 
                Width="500" 
                Height="650" 
                WindowStartupLocation="CenterOwner"
                Background="#252526">
            <Window.Resources>
                <Style TargetType="Button">
                    <Setter Property="Background" Value="#007ACC"/>
                    <Setter Property="Foreground" Value="#FFFFFF"/>
                    <Setter Property="BorderBrush" Value="#555555"/>
                    <Setter Property="Padding" Value="8,4"/>
                    <Setter Property="Margin" Value="5"/>
                    <Setter Property="Height" Value="30"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border Background="{TemplateBinding Background}" 
                                        BorderBrush="{TemplateBinding BorderBrush}" 
                                        BorderThickness="1" 
                                        CornerRadius="3">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#0066B3"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#005B9C"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style x:Key="ConnectButtonStyle" TargetType="Button">
                    <Setter Property="Background" Value="#FF0000"/> <!-- Red standard -->
                    <Setter Property="Foreground" Value="#FFFFFF"/>
                    <Setter Property="BorderBrush" Value="#555555"/>
                    <Setter Property="Padding" Value="8,4"/>
                    <Setter Property="Margin" Value="5"/>
                    <Setter Property="Height" Value="30"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border Background="{TemplateBinding Background}" 
                                        BorderBrush="{TemplateBinding BorderBrush}" 
                                        BorderThickness="1" 
                                        CornerRadius="3">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#CC0000"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#990000"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style TargetType="Label">
                    <Setter Property="Foreground" Value="#D4D4D4"/>
                    <Setter Property="Margin" Value="5,5,5,0"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                </Style>
                <Style TargetType="TextBox">
                    <Setter Property="Background" Value="#1E1E1E"/>
                    <Setter Property="Foreground" Value="#FFFFFF"/>
                    <Setter Property="BorderBrush" Value="#555555"/>
                    <Setter Property="Padding" Value="4"/>
                    <Setter Property="Margin" Value="5,2,5,2"/>
                    <Setter Property="Width" Value="180"/>
                    <Setter Property="Height" Value="26"/>
                </Style>
                <Style TargetType="ComboBox">
                    <Setter Property="Background" Value="#1E1E1E"/>
                    <Setter Property="Foreground" Value="#FFFFFF"/>
                    <Setter Property="BorderBrush" Value="#555555"/>
                    <Setter Property="Padding" Value="4"/>
                    <Setter Property="Margin" Value="5,2,5,2"/>
                    <Setter Property="Width" Value="180"/>
                    <Setter Property="Height" Value="26"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ComboBox">
                                <Grid>
                                    <ToggleButton x:Name="ToggleButton" 
                                                  BorderBrush="{TemplateBinding BorderBrush}" 
                                                  Background="{TemplateBinding Background}" 
                                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ClickMode="Press">
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Grid>
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="16"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Border x:Name="Border" 
                                                            Grid.ColumnSpan="2" 
                                                            Background="{TemplateBinding Background}" 
                                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                                            BorderThickness="1"/>
                                                    <Border Grid.Column="0" Margin="1" Background="{TemplateBinding Background}"/>
                                                    <Path x:Name="Arrow" 
                                                          Grid.Column="1" 
                                                          Fill="#FFFFFF" 
                                                          HorizontalAlignment="Center" 
                                                          VerticalAlignment="Center" 
                                                          Data="M 0 0 L 4 4 L 8 0 Z"/>
                                                </Grid>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                    </ToggleButton>
                                    <ContentPresenter x:Name="ContentSite" 
                                                      IsHitTestVisible="False" 
                                                      Content="{TemplateBinding SelectionBoxItem}" 
                                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                                      Margin="{TemplateBinding Padding}" 
                                                      VerticalAlignment="Center" 
                                                      HorizontalAlignment="Left"/>
                                    <Popup x:Name="Popup" 
                                           Placement="Bottom" 
                                           IsOpen="{TemplateBinding IsDropDownOpen}" 
                                           AllowsTransparency="True" 
                                           Focusable="False" 
                                           PopupAnimation="Slide">
                                        <Grid x:Name="DropDown" 
                                              SnapsToDevicePixels="True" 
                                              MinWidth="{TemplateBinding ActualWidth}" 
                                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                            <Border x:Name="DropDownBorder" 
                                                    Background="#1E1E1E" 
                                                    BorderThickness="1" 
                                                    BorderBrush="#555555"/>
                                            <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                            </ScrollViewer>
                                        </Grid>
                                    </Popup>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.5"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ItemContainerStyle">
                        <Setter.Value>
                            <Style TargetType="ComboBoxItem">
                                <Setter Property="Background" Value="#1E1E1E"/>
                                <Setter Property="Foreground" Value="#FFFFFF"/>
                                <Setter Property="Padding" Value="4"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ComboBoxItem">
                                            <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                                <ContentPresenter/>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsHighlighted" Value="True">
                                                    <Setter Property="Background" Value="#333333"/>
                                                </Trigger>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter Property="Background" Value="#333333"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style TargetType="CheckBox">
                    <Setter Property="Foreground" Value="#D4D4D4"/>
                    <Setter Property="Margin" Value="5,5,5,0"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                </Style>
                <Style TargetType="ScrollBar">
                    <Setter Property="Background" Value="#333333"/>
                    <Setter Property="BorderBrush" Value="#555555"/>
                    <Setter Property="Width" Value="12"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ScrollBar">
                                <Grid Background="{TemplateBinding Background}">
                                    <Track x:Name="PART_Track" IsDirectionReversed="True">
                                        <Track.Thumb>
                                            <Thumb Background="#555555" BorderBrush="#777777" BorderThickness="1"/>
                                        </Track.Thumb>
                                    </Track>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
                <Style TargetType="Border" x:Key="SectionBorder">
                    <Setter Property="BorderBrush" Value="#555555"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="CornerRadius" Value="3"/>
                    <Setter Property="Margin" Value="5"/>
                    <Setter Property="Padding" Value="10"/>
                    <Setter Property="Background" Value="#2D2D2D"/>
                </Style>
                <Style TargetType="TextBlock" x:Key="SectionHeader">
                    <Setter Property="Foreground" Value="#D4D4D4"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Margin" Value="0,0,0,5"/>
                </Style>
            </Window.Resources>
            <ScrollViewer VerticalScrollBarVisibility="Auto">
                <StackPanel Margin="10">
                    <!-- Filter Settings Section -->
                    <Border Style="{StaticResource SectionBorder}">
                        <StackPanel>
                            <TextBlock Text="Filter Settings" Style="{StaticResource SectionHeader}"/>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Label Content="CVSS Score Filter:" Grid.Row="0" Grid.Column="0"/>
                                <ComboBox x:Name="ddlCvssScore" Grid.Row="0" Grid.Column="1"/>
                                <Label Content="CVSS Score Column:" Grid.Row="1" Grid.Column="0"/>
                                <ComboBox x:Name="ddlCvssScoreColumn" Grid.Row="1" Grid.Column="1"/>
                                <Label Content="Severity Level Filter:" Grid.Row="2" Grid.Column="0"/>
                                <ComboBox x:Name="ddlSeverityLevel" Grid.Row="2" Grid.Column="1"/>
                                <Label Content="Severity Level Column:" Grid.Row="3" Grid.Column="0"/>
                                <ComboBox x:Name="ddlSeverityLevelColumn" Grid.Row="3" Grid.Column="1"/>
                            </Grid>
                        </StackPanel>
                    </Border>
        
                    <!-- Export Options Section -->
                    <Border Style="{StaticResource SectionBorder}">
                        <StackPanel>
                            <TextBlock Text="Export Options" Style="{StaticResource SectionHeader}"/>
                            <StackPanel Orientation="Horizontal">
                                <Button x:Name="btnImportFilters" Content="Import Filters" Width="90"/>
                                <Button x:Name="btnExportFilters" Content="Export Filters" Width="90" Margin="10,0,0,0"/>
                            </StackPanel>
                            <CheckBox x:Name="chkAutoExport" Content="Automatically export filtered CSV"/>
                        </StackPanel>
                    </Border>
        
                    <!-- NinjaOne API Section -->
                    <Border Style="{StaticResource SectionBorder}">
                        <StackPanel>
                            <TextBlock Text="NinjaOne API" Style="{StaticResource SectionHeader}"/>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Label Content="Scan Source:" Grid.Row="0" Grid.Column="0"/>
                                <ComboBox x:Name="ddlVendor" Grid.Row="0" Grid.Column="1"/>
                                <Label Content="ClientID:" Grid.Row="1" Grid.Column="0"/>
                                <TextBox x:Name="txtClientIDManual" Grid.Row="1" Grid.Column="1"/>
                                <Label Content="ClientSecret:" Grid.Row="2" Grid.Column="0"/>
                                <TextBox x:Name="txtClientSecretManual" Grid.Row="2" Grid.Column="1"/>
                                <Label Content="Base URL:" Grid.Row="3" Grid.Column="0"/>
                                <ComboBox x:Name="ddlBaseURL" Grid.Row="3" Grid.Column="1"/>
                                <Label Content="Scan Group:" Grid.Row="4" Grid.Column="0"/>
                                <ComboBox x:Name="ddlScanGroupID" Grid.Row="4" Grid.Column="1"/>
                            </Grid>
                            <Button x:Name="btnConnect" Content="Connect to NinjaOne" Width="120" Style="{StaticResource ConnectButtonStyle}" HorizontalAlignment="Right"/>
                        </StackPanel>
                    </Border>
        
                    <!-- Action Buttons -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,5">
                        <Button x:Name="btnApply" Content="Apply" Width="75"/>
                        <Button x:Name="btnUploadToNinja" Content="Upload to NinjaOne" Width="120" Margin="10,0"/>
                        <Button x:Name="btnCancel" Content="Cancel" Width="75"/>
                    </StackPanel>
                </StackPanel>
            </ScrollViewer>
        </Window>
"@
        
            $reader = [System.Xml.XmlReader]::Create([System.IO.StringReader]::new($filterWindowXaml))
            $filterWindow = [Windows.Markup.XamlReader]::Load($reader)
            $reader.Dispose()
        
            # Retrieve the controls
            $lblCvssScore = $filterWindow.FindName("lblCvssScore")
            $ddlCvssScore = $filterWindow.FindName("ddlCvssScore")
            $lblCvssScoreColumn = $filterWindow.FindName("lblCvssScoreColumn")
            $ddlCvssScoreColumn = $filterWindow.FindName("ddlCvssScoreColumn")
            $lblSeverityLevel = $filterWindow.FindName("lblSeverityLevel")
            $ddlSeverityLevel = $filterWindow.FindName("ddlSeverityLevel")
            $lblSeverityLevelColumn = $filterWindow.FindName("lblSeverityLevelColumn")
            $ddlSeverityLevelColumn = $filterWindow.FindName("ddlSeverityLevelColumn")
            $btnImportFilters = $filterWindow.FindName("btnImportFilters")
            $btnExportFilters = $filterWindow.FindName("btnExportFilters")
            $chkAutoExport = $filterWindow.FindName("chkAutoExport")
            $lblVendor = $filterWindow.FindName("lblVendor")
            $ddlVendor = $filterWindow.FindName("ddlVendor")
            $lblClientIDManual = $filterWindow.FindName("lblClientIDManual")
            $txtClientIDManual = $filterWindow.FindName("txtClientIDManual")
            $lblClientSecretManual = $filterWindow.FindName("lblClientSecretManual")
            $txtClientSecretManual = $filterWindow.FindName("txtClientSecretManual")
            $lblBaseURL = $filterWindow.FindName("lblBaseURL")
            $ddlBaseURL = $filterWindow.FindName("ddlBaseURL")
            $btnConnect = $filterWindow.FindName("btnConnect")
            $lblScanGroupID = $filterWindow.FindName("lblScanGroupID")
            $ddlScanGroupID = $filterWindow.FindName("ddlScanGroupID")
            $btnApply = $filterWindow.FindName("btnApply")
            $btnUploadToNinja = $filterWindow.FindName("btnUploadToNinja")
            $btnCancel = $filterWindow.FindName("btnCancel")
        
            # Set initial button color based on connection status
            if ($global:IsConnected) {
                $btnConnect.Background = [System.Windows.Media.SolidColorBrush]::new([System.Windows.Media.Color]::FromRgb(0, 255, 0)) # Green
            } else {
                $btnConnect.Background = [System.Windows.Media.SolidColorBrush]::new([System.Windows.Media.Color]::FromRgb(255, 0, 0)) # Red
            }
        
            # Populate the dropdowns
            $ddlBaseURL.ItemsSource = @("app.ninjarmm.com", "eu.ninjarmm.com", "oc.ninjarmm.com", "ca.ninjarmm.com", "us2.ninjarmm.com")
            $ddlBaseURL.SelectedIndex = 0
            $ddlCvssScore.ItemsSource = @("All", ">= 9.0", ">= 7.0", ">= 4.0", "<= 3.9")
            $ddlCvssScore.SelectedItem = $global:cvssScoreFilter
            $ddlCvssScoreColumn.ItemsSource = $global:originalData[0].PSObject.Properties.Name
            $ddlCvssScoreColumn.SelectedItem = $global:cvssScoreColumn
            $ddlSeverityLevel.ItemsSource = @("All", "Low", "Medium", "High", "Critical")
            $ddlSeverityLevel.SelectedItem = $global:severityLevelFilter
            $ddlSeverityLevelColumn.ItemsSource = $global:originalData[0].PSObject.Properties.Name
            $ddlSeverityLevelColumn.SelectedItem = $global:severityLevelColumn
            $ddlVendor.ItemsSource = @("ConnectSecure", "Crowdstrike Spotlight", "MDE Kit", "Microsoft Defender", "Other", "Qualys", "Rapid7", "Tenable")
            if ($global:scanSource) { $ddlVendor.SelectedItem = $global:scanSource }
            $chkAutoExport.IsChecked = $global:autoExportState
            $ddlScanGroupID.IsEnabled = $global:IsConnected
            if ($global:IsConnected) {
                foreach ($group in $global:ScanGroups) {
                    if ($null -ne $group -and $null -ne $group.groupName -and $group.groupName -ne "") {
                        $displayName = "$($group.groupName.Trim()) (ID: $($group.id))"
                        $ddlScanGroupID.Items.Add($displayName) | Out-Null
                    }
                }
          
                if ($ddlScanGroupID.Items.Count -gt 0) {
                    $ddlScanGroupID.SelectedIndex = 0
                }
            }
            $btnUploadToNinja.IsEnabled = $global:IsConnected
        
            # Restore last used values (if available)
            if (-not [string]::IsNullOrWhiteSpace($global:ClientID)) {
                $txtClientIDManual.Text = $global:ClientID
            }
            if (-not [string]::IsNullOrWhiteSpace($global:ClientSecret)) {
                $txtClientSecretManual.Text = $global:ClientSecret
            }
            if ($global:BaseURL -and $ddlBaseURL.Items -contains $global:BaseURL) {
                $ddlBaseURL.SelectedItem = $global:BaseURL
            }
        
            # Import Filters Button
            $btnImportFilters.Add_Click({
                $openFileDialog = New-Object System.Windows.Forms.OpenFileDialog
                $openFileDialog.Filter = "JSON files (*.json)|*.json|All files (*.*)|*.*"
                if ($openFileDialog.ShowDialog() -ne "OK") { return }
            
                $filterPath = $openFileDialog.FileName
                $importedJson = Get-Content -Path $filterPath | ConvertFrom-Json
            
                if ($importedJson.filters) {
                    $global:txtFilter.Text = ($importedJson.filters -join ", ")
                    $global:excludeFilter = $global:txtFilter.Text
                }
                if ($importedJson.ScanSource) {
                    $ddlVendor.SelectedItem = $importedJson.ScanSource
                    $global:scanSource = $importedJson.ScanSource
                }
                if ($importedJson.SelectedColumns) {
                    $global:selectedColumns = $importedJson.SelectedColumns
                }
                if ($importedJson.CvssScoreColumn) {
                    $ddlCvssScoreColumn.SelectedItem = $importedJson.CvssScoreColumn
                    $global:cvssScoreColumn = $importedJson.CvssScoreColumn
                }
                if ($importedJson.SeverityLevelColumn) {
                    $ddlSeverityLevelColumn.SelectedItem = $importedJson.SeverityLevelColumn
                    $global:severityLevelColumn = $importedJson.SeverityLevelColumn
                }
                if ($importedJson.autoExport) {
                    $chkAutoExport.IsChecked = $importedJson.autoExport
                    $global:autoExportState = $importedJson.autoExport
                }
                if ($importedJson.exportPath) {
                    $global:exportPath = $importedJson.exportPath
                }
                if ($importedJson.exportFileName) {
                    $global:exportFileName = $importedJson.exportFileName
                }
                if ($importedJson.BaseURL -and $ddlBaseURL.Items -contains $importedJson.BaseURL) {
                    $ddlBaseURL.SelectedItem = $importedJson.BaseURL
                    $global:BaseURL = $importedJson.BaseURL
                } else {
                    Write-LogEntry -Message "Imported BaseURL '$($importedJson.BaseURL)' is not a valid option. Using default value."
                    $ddlBaseURL.SelectedIndex = 0
                    $global:BaseURL = $ddlBaseURL.SelectedItem
                }
                if ($importedJson.ClientID -and $importedJson.ClientSecret) {
                    try {
                        $secureID = $importedJson.ClientID | ConvertTo-SecureString
                        $secureSecret = $importedJson.ClientSecret | ConvertTo-SecureString
                
                        $plainID = [System.Net.NetworkCredential]::new("", $secureID).Password
                        $plainSecret = [System.Net.NetworkCredential]::new("", $secureSecret).Password
                
                        $txtClientIDManual.Text = $plainID
                        $txtClientSecretManual.Text = $plainSecret
                        $global:ClientID = $plainID
                        $global:ClientSecret = $plainSecret
                    }
                
                    catch {
                        Write-LogEntry -Message "Failed to load ClientID/ClientSecret from filters.json: $_"
                        [System.Windows.MessageBox]::Show("Failed to load ClientID/ClientSecret from filters.json.", "Warning", "OK", "Warning")
                    }
                }
                Write-LogEntry -Message "Imported filters from: $filterPath"
            })
        
            # Export Filters Button
            $btnExportFilters.Add_Click({
                $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
                $saveFileDialog.Filter = "JSON files (*.json)|*.json"
                $saveFileDialog.FileName = "filters.json"
                if ($saveFileDialog.ShowDialog() -eq "OK") {
                    $filters = Get-FilterTerms
                    $encryptedClientID = $null
                    $encryptedClientSecret = $null
                    if ($txtClientIDManual.Text -and $txtClientSecretManual.Text) {
                        # Encrypt credentials before saving
                        $secureID = $txtClientIDManual.Text | ConvertTo-SecureString -AsPlainText -Force
                        $secureSecret = $txtClientSecretManual.Text | ConvertTo-SecureString -AsPlainText -Force
                        $encryptedClientID = $secureID | ConvertFrom-SecureString
                        $encryptedClientSecret = $secureSecret | ConvertFrom-SecureString
                    }
        
                    $json = @{
                        exportFileName = $global:exportFileName
                        exportPath = $global:exportPath
                        filters = $filters
                        autoExport = $chkAutoExport.IsChecked
                        ScanSource = $ddlVendor.SelectedItem
                        SelectedColumns = $global:selectedColumns
                        CvssScoreColumn = $ddlCvssScoreColumn.SelectedItem
                        SeverityLevelColumn = $ddlSeverityLevelColumn.SelectedItem
                        ClientID = $encryptedClientID
                        ClientSecret = $encryptedClientSecret
                        BaseURL = $ddlBaseURL.SelectedItem
                    } | ConvertTo-Json -Depth 3
                    $json | Out-File -Encoding UTF8 -FilePath $saveFileDialog.FileName
                    Write-LogEntry -Message "Exported filters to: $($saveFileDialog.FileName)"
                }
            })
        
            # Connect to NinjaOne Button
            $btnConnect.Add_Click({
                $ClientID = $txtClientIDManual.Text
                $ClientSecret = $txtClientSecretManual.Text
        
                try {
                    if (-not $ClientID -or -not $ClientSecret) {
                        throw "ClientID and ClientSecret must be provided."
                    }
        
                    $global:BaseURL = $ddlBaseURL.SelectedItem
                    $global:ClientID = $ClientID
                    $global:ClientSecret = $ClientSecret
        
                    try {
                        $global:TokenInfo = Get-NinjaToken
                        $global:ScanGroups = Get-VulScanGroups
                        $global:IsConnected = $true
        
                        Write-LogEntry -Message "ScanGroups retrieved: $($global:ScanGroups | ConvertTo-Json -Depth 3)"
                        
                        $ddlScanGroupID.Items.Clear()
                        Write-LogEntry -Message "Cleared ScanGroupID dropdown items"
                        
                        foreach ($group in $global:ScanGroups) {
                            Write-LogEntry -Message "Processing group: $($group | ConvertTo-Json -Depth 3)"
                            if ($null -ne $group -and $null -ne $group.groupName -and $group.groupName -ne "") {
                                $displayName = "$($group.groupName.Trim()) (ID: $($group.id))"
                                $ddlScanGroupID.Items.Add($displayName) | Out-Null
                                Write-LogEntry -Message "Added group to dropdown: $displayName"
                            }
                            else {
                                Write-LogEntry -Message "Skipped group due to missing or empty groupName"
                            }
                        }
                        
                        
                        Write-LogEntry -Message "Total items in dropdown: $($ddlScanGroupID.Items.Count)"
                        if ($ddlScanGroupID.Items.Count -gt 0) {
                            $ddlScanGroupID.SelectedIndex = 0
                            Write-LogEntry -Message "Selected first item in dropdown"
                        }
                        else {
                            Write-LogEntry -Message "No items added to dropdown"
                        }
        
                        $ddlScanGroupID.IsEnabled = $true
                        $btnUploadToNinja.IsEnabled = $true
                        $btnConnect.Background = [System.Windows.Media.SolidColorBrush]::new([System.Windows.Media.Color]::FromRgb(0, 255, 0)) # Green
        
                        Write-LogEntry -Message "Successfully connected to NinjaOne."
                        #[System.Windows.MessageBox]::Show("Successfully connected to NinjaOne.", "Success", "OK", "Information")
                    }
                    catch {
                        $global:IsConnected = $false
                        $ddlScanGroupID.IsEnabled = $false
                        $btnUploadToNinja.IsEnabled = $false
                        $btnConnect.Background = [System.Windows.Media.SolidColorBrush]::new([System.Windows.Media.Color]::FromRgb(255, 0, 0)) # Red
                        Write-LogEntry -Message "Failed to connect to NinjaOne: $_"
                        [System.Windows.MessageBox]::Show("Failed to connect to NinjaOne: $_", "Error", "OK", "Error")
                    }
                }
                catch {
                    $btnConnect.Background = [System.Windows.Media.SolidColorBrush]::new([System.Windows.Media.Color]::FromRgb(255, 0, 0)) # Red
                    Write-LogEntry -Message "Error in connection setup: $_"
                    [System.Windows.MessageBox]::Show("Error in connection setup: $_", "Error", "OK", "Error")
                }
            })
        
            # Apply Button
            $btnApply.Add_Click({
                try {
                    if (-not $ddlCvssScore.SelectedItem) {
                        throw "Please select a CVSS Score Filter."
                    }
                    # Validate that the selected CVSS Score column contains numeric values
                    $cvssCol = $ddlCvssScoreColumn.SelectedItem
                    $hasValidCvss = $global:originalData | Where-Object {
                    try {
                    [double]($_.$cvssCol -replace ',', '.') | Out-Null
                    $true
                    }
                    catch { $false }
                    } | Select-Object -First 1
                    if (-not $hasValidCvss) {
                    [System.Windows.MessageBox]::Show("The selected CVSS Score column does not contain valid numeric values. Please choose a different column.", "Warning", "OK", "Warning")
                    return
                    }
                    if (-not $ddlSeverityLevel.SelectedItem) {
                        throw "Please select a Severity Level Filter."
                    }                
                    # Validate that the selected Severity Level column has non-empty values
                    $severityCol = $ddlSeverityLevelColumn.SelectedItem
                    $hasSeverity = $global:originalData | Where-Object {
                    $_.$severityCol -ne $null -and $_.$severityCol.ToString().Trim() -ne ""
                    } | Select-Object -First 1
                    if (-not $hasSeverity) {
                    [System.Windows.MessageBox]::Show("The selected Severity Level column does not contain any usable values. Please choose a different column.", "Warning", "OK", "Warning")
                    return
                    }
                    if (-not $ddlCvssScoreColumn.SelectedItem) {
                        throw "Please select a CVSS Score Column."
                    }
                    if (-not $ddlSeverityLevelColumn.SelectedItem) {
                        throw "Please select a Severity Level Column."
                    }
        
                    $global:cvssScoreFilter = $ddlCvssScore.SelectedItem
                    $global:severityLevelFilter = $ddlSeverityLevel.SelectedItem
                    $global:cvssScoreColumn = $ddlCvssScoreColumn.SelectedItem
                    $global:severityLevelColumn = $ddlSeverityLevelColumn.SelectedItem
                    $global:autoExportState = $chkAutoExport.IsChecked
                    $global:scanSource = $ddlVendor.SelectedItem
                    $global:ClientID = $txtClientIDManual.Text
                    $global:ClientSecret = $txtClientSecretManual.Text
                    $global:BaseURL = $ddlBaseURL.SelectedItem
        
                    # Normalize cvssScore column (replace comma with dot)
                    foreach ($row in $global:originalData) {
                        if ($null -ne $row.($global:cvssScoreColumn) -and $row.($global:cvssScoreColumn) -ne "") {
                            $row.($global:cvssScoreColumn) = $row.($global:cvssScoreColumn) -replace ',', '.'
                        }
                    }
        
                    Update-DataGrid
                    Write-LogEntry -Message "Filters applied: CVSS Score Filter = $($global:cvssScoreFilter), Severity Level Filter = $($global:severityLevelFilter), CVSS Score Column = $($global:cvssScoreColumn), Severity Level Column = $($global:severityLevelColumn), Auto Export = $($global:autoExportState), Scan Source = $($global:scanSource)"
                    $filterWindow.Close()
                }
                catch {
                    [System.Windows.MessageBox]::Show("Error applying filters: $_", "Error", "OK", "Error")
                    Write-LogEntry -Message "Error applying filters: $_"
                }
            })
        
            # Upload to NinjaOne Button
            $btnUploadToNinja.Add_Click({
                try {
                    if (-not $global:IsConnected) {
                        throw "Please connect to NinjaOne first by clicking 'Connect to NinjaOne'."
                    }
        
                    if (-not $ddlScanGroupID.SelectedItem) {
                        throw "Please select a Scan Group."
                    }
        
                    $selectedScanGroup = $global:ScanGroups | Where-Object { "$($_.groupName.Trim()) (ID: $($_.id))" -eq $ddlScanGroupID.SelectedItem }
                    if (-not $selectedScanGroup) {
                        throw "Selected Scan Group not found."
                    }
                    $global:ScanGroupID = [int]$selectedScanGroup.id
                    $global:BaseURL = $ddlBaseURL.SelectedItem
        
                    # Export filtered CSV if auto-export is not enabled
                    if (-not $global:autoExportState) {
                        Export-FilteredCSV
                    }
        
                    $csvPath = Join-Path -Path $global:exportPath -ChildPath $global:exportFileName
                    if (-not (Test-Path $csvPath)) {
                        throw "CSV file not found at: $csvPath. Please ensure the file was exported."
                    }
        
                    New-VulScanImport -SGID $global:ScanGroupID -CSV $csvPath
                    Write-LogEntry -Message "Successfully uploaded CSV to NinjaOne Scan Group ID: $($global:ScanGroupID)"
        
                    $ImportStatus = (Get-VulScanGroups -SGID $global:ScanGroupID).Status
                    if (-not $ImportStatus) {
                        [System.Windows.MessageBox]::Show("CSV successfully uploaded to NinjaOne. Unable to retrieve import status, but processing may still complete.", "Success", "OK", "Information")
                        Write-LogEntry -Message "Unable to retrieve import status for Scan Group ID: $($global:ScanGroupID)"
                    }
                    else {
                        [System.Windows.MessageBox]::Show("CSV successfully uploaded to NinjaOne. The import is being processed and may take some time.", "Success", "OK", "Information")
                        Write-LogEntry -Message "CSV uploaded with status: $ImportStatus"
                    }
                }
                catch {
                    [System.Windows.MessageBox]::Show("Error uploading to NinjaOne: $_", "Error", "OK", "Error")
                    Write-LogEntry -Message "Error uploading to NinjaOne: $_"
                }
            })
        
            # Cancel Button
            $btnCancel.Add_Click({
                $filterWindow.Close()
                Write-LogEntry -Message "Filter Options window closed without applying changes."
            })
        
            $filterWindow.ShowDialog()
        })

        # Load saved filters if they exist
        if (Test-Path $global:filterFilePath) {
            try {
                $savedFilters = Get-Content -Path $global:filterFilePath | ConvertFrom-Json
                if ($savedFilters.filters) {
                    $global:excludeFilter = ($savedFilters.filters -join ", ")
                    $global:txtFilter.Text = $global:excludeFilter
                }
                if ($savedFilters.autoExport) {
                    $global:autoExportState = $savedFilters.autoExport
                }
                if ($savedFilters.ScanSource) {
                    $global:scanSource = $savedFilters.ScanSource
                }
                if ($savedFilters.SelectedColumns) {
                    $global:selectedColumns = $savedFilters.SelectedColumns
                }
                if ($savedFilters.CvssScoreColumn) {
                    $global:cvssScoreColumn = $savedFilters.CvssScoreColumn
                }
                if ($savedFilters.SeverityLevelColumn) {
                    $global:severityLevelColumn = $savedFilters.SeverityLevelColumn
                }
                if ($savedFilters.exportPath) {
                    $global:exportPath = $savedFilters.exportPath
                }
                if ($savedFilters.exportFileName) {
                    $global:exportFileName = $savedFilters.exportFileName
                }
                if ($savedFilters.BaseURL) {
                    $global:BaseURL = $savedFilters.BaseURL
                }
                Write-LogEntry -Message "Loaded saved filters from: $global:filterFilePath"
            }
            catch {
                Write-LogEntry -Message "Failed to load saved filters: $_"
            }
        }

        # Show the main window
        $window.ShowDialog() | Out-Null
    }
    catch {
        Write-LogEntry -Message "Error creating GUI: $_"
        [System.Windows.MessageBox]::Show("Error creating GUI: $_", "Error", "OK", "Error")
    }
}

# Main script execution
try {
    Add-Type -AssemblyName PresentationFramework
    Add-Type -AssemblyName System.Windows.Forms

    # Headless mode: direct upload using parameters
    if ($UploadOnly -and $CSV -and $ClientID -and $ClientSecret -and $BaseURL -and $ScanGroupID) {
        try {
            Write-LogEntry -Message "Running in headless upload mode..."
            $global:ClientID = $ClientID
            $global:ClientSecret = $ClientSecret
            $global:BaseURL = $BaseURL
            $global:ScanGroupID = $ScanGroupID
            if ($ScanSource) { $global:scanSource = $ScanSource }

            $global:TokenInfo = Get-NinjaToken

            if (-not (Test-Path $CSV)) {
                throw "CSV file not found at path: $CSV"
            }

            New-VulScanImport -SGID $ScanGroupID -CSV $CSV
            Write-LogEntry -Message "CSV successfully uploaded in headless mode."
            Write-Host "✅ Upload successful"
            exit 0
        }
        catch {
            Write-LogEntry -Message "Headless upload failed: $_"
            Write-Host "❌ Upload failed: $_"
            exit 1
        }
    }

    # GUI fallback
    Show-GUI
}
catch {
    Write-LogEntry -Message "Error starting application: $_"
    [System.Windows.MessageBox]::Show("Error starting application: $_", "Error", "OK", "Error")
}
